package uk.ac.open.kmi.forge.ptAnywhere.analyser.dao.formatters;

import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Iterator;
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import com.rusticisoftware.tincan.Statement;
import org.joda.time.DateTime;
import uk.ac.open.kmi.forge.ptAnywhere.analyser.dao.BaseVocabulary;
import uk.ac.open.kmi.forge.ptAnywhere.analyser.exceptions.LRSException;


/**
 * It returns a JSON representing the number of sessions classified per action count.
 */
public class ActionsHistogramFormatter implements StatementResultFormatter<JsonArray> {

    final DateTime since, until;


    public ActionsHistogramFormatter(DateTime since, DateTime until) {
        this.since = since;
        this.until = until;
    }

    @Override
    public JsonArray toJson(Iterator<Statement> results) throws LRSException {
        final Map<String, Integer> registrations = new HashMap<String, Integer>();
        while (results.hasNext()) {
            final Statement st = results.next();
            // Ignore statements generated by the backend.
            if (!st.getVerb().getId().toString().equals(BaseVocabulary.READ)) {
                final String registrationUuid = st.getContext().getRegistration().toString();
                final Integer val = registrations.get(registrationUuid);
                if (val == null) {
                    registrations.put(registrationUuid, 1);
                } else {
                    registrations.put(registrationUuid, val + 1);
                }
            }
        }

        // Count per action number
        final Map<Integer, Integer> sessionCountPerActionNumber = new TreeMap<Integer, Integer>();
        for (Integer actionsCount: registrations.values()) {
            final Integer count = sessionCountPerActionNumber.get(actionsCount);
            if ( count==null ) {
                sessionCountPerActionNumber.put(actionsCount, 1);
            } else {
                sessionCountPerActionNumber.put(actionsCount, count + 1);
            }
        }

        // Generate JSON object
        final JsonArrayBuilder ret = Json.createArrayBuilder();
        int index = 1;
        for (Integer count: sessionCountPerActionNumber.keySet()) {
            while (index < count) {
                ret.add(0);
                index++;
            }
            ret.add(sessionCountPerActionNumber.get(count));
            index++;  // Or index = count;
        }
        return ret.build();
    }

}
